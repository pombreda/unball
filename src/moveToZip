#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""moveToZip
Copyright 2005-2009 Stephan Sokolow

See the README file in the distribution archive for details.
If this tool came pre-installed, the archive can be obtained from https://launchpad.net/unball

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

@todo: What kind of safety checks should I put in here?
@todo: Consider adding fallbacks using 7z and the zipfile module.
"""

__appname__ = "moveToZip"
from unball import __author__, __version__, __license__

import logging, os, subprocess

# Set up INFO logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

if __name__ == '__main__':
    from optparse import OptionParser
    descr = ("Safely move one or more directories into ZIP archives with the" +
             "same parent directory.")

    parser = OptionParser(usage="%prog [options] archive ...",
                        description=descr,
                        version="%%prog %s" % __version__)
    #parser.add_option('-v', '--verbose', action="store_true", dest="verbose",
    #    default=False, help="Increase verbosity")

    opts, args = parser.parse_args()

    for path in args:
        path = os.path.abspath(path)
        parent, srcdir = os.path.split(path)
        destfile = srcdir + '.zip'

        try:
            subprocess.check_call(['zip', '-rTm', srcdir + '.zip', srcdir], cwd=parent)
        except subprocess.CalledProcessError:
            logging.error("Zip subprocess failed to compress source file/directory: %s" % path)
        except OSError:
            logging.critical("Could not find the zip binary")
