#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
@todo:
 - I still need to add a manpage for moveToZip.
 - How should I support bzip2/gzip-compressing manpages?
 - Add an apidocs/epydoc command and make sdist run it.

@todo:
 - Decide what to do about prefix mismatches between this and
   Konqueror/Thunar/etc.
 - Figure out how to install to ~/.kde and such if --home
   has been specified.
 - Look into removing my need for paver and/or setuptools
   (http://rhodesmill.org/brandon/2009/eby-magic/)

@todo: Finish building this:
 - http://epydoc.sourceforge.net/api/epydoc.docbuilder-module.html
 - https://help.launchpad.net/Code
 - http://docs.python.org/distutils/setupscript.html
    #installing-package-data
    #installing-additional-files
    #debugging-the-setup-script
 - http://docs.python.org/distutils/sourcedist.html
    #specifying-the-files-to-distribute
 - http://docs.python.org/distutils/apiref.html#distutils.core.setup
 - http://docs.python.org/distutils/extending.html
 - http://wiki.python.org/moin/Distutils/Tutorial
 - http://peak.telecommunity.com/DevCenter/setuptools
 - http://peak.telecommunity.com/DevCenter/PythonEggs

@todo: Announce the new version:
 - https://launchpad.net/unball
 - http://bugs.gentoo.org/194471
 - http://www.cli-apps.org/
 - http://pypi.python.org/pypi
 - http://freshmeat.net/
 - http://www.ohloh.net/

@todo: Blog about these alternatives for non-Paver setup.py use:
 - Source: http://da44en.wordpress.com/2002/11/22/using-distutils/
"""

import os, sys
#from distutils.command.build import build as __build
#from distutils.core import Command
#from distutils.errors import DistutilsOptionError

from build_manpage import build_manpage as _build_manpage

from paver.easy import task, needs, path
from paver.setuputils import setup

srcdir = os.path.abspath(os.path.join(os.path.dirname(__file__), 'src'))
sys.path.append(srcdir)
import unball

@task
@needs('generate_setup', 'minilib', 'setuptools.command.sdist')
def sdist():
    """Create a source distro with a setup py and paver mini-lib."""
    pass


@task
def clean():
    """Remove autogenerated content from the working tree.
    @todo: Finish re-architecting this and cleaning it up.
    @todo: Make it print a warning/error on except.
    """
    for name in ('build', 'dist', 'setup.py', 'paver-minilib.zip'):
        try:
            if os.path.isdir(name):
                path(name).rmtree()
            elif os.path.isfile(name):
                path(name).unlink()
        except:
            pass
    for fldr, dirs, files in os.walk('.'):
        for dirname in dirs:
            if os.path.splitext(dirname)[1] == ".egg-info":
                try:
                    path(os.path.join(fldr, dirname)).rmtree()
                except:
                    pass
        for fname in files:
            if fname.endswith('.pyc'):
                try:
                    path(os.path.join(fldr, fname)).unlink()
                except:
                    pass

setup(
    name="Unball",
    version=unball.__version__,
    description="'Do what I mean' archive commands for your shell",
    long_description="""
        Simple console wrappers which handle decisions like
        "what format is it in?" and "Do I need to create a folder for it?"
        for you.
        """,  # TODO: Rewrite this when I finish making this an API with
              # console reference implementations.
    author="Stephan Sokolow (deitarion/SSokolow)",
    author_email="http://www.ssokolow.com/ContactMe",  # No spam harvesting
    url='https://github.com/ssokolow/unball',
    license="License :: OSI Approved :: GNU General Public License (GPL)",
    classifiers=[
        "Environment :: Console",
        "Intended Audience :: End Users/Desktop",
        "Intended Audience :: System Administrators",
        # "Intended Audience :: Developers",
        # TODO: For when I finish the API rework.
        "License :: OSI Approved :: GNU General Public License (GPL)",
        "Operating System :: POSIX",
        #"Operating System :: OS Independent",
        # TODO: For when the stdlib-based zip/tar support is ready.
        "Programming Language :: Python",
        #TODO: Add support for Python 3 and an appropriate classifier
        "Topic :: System :: Archiving",
        "Topic :: Utilities",
    ],

    packages=['unball'],
    scripts=['src/moveToZip'],

    #TODO: Forget setuptools. Just replace this with a stub script.
    entry_points={
        'console_scripts': [
            'unball = unball.main:main_func',
        ],
    },
    data_files=[('share/man/man1', ['build/man/unball.1']),
                ('share/apps/konqueror/servicemenus', [
                    'src/servicemenus/unball.desktop',
                    'src/servicemenus/moveToZip.desktop'
                ]),
                ('libexec/thunar-archive-plugin', ['src/unball.tap'])],

    cmdclass={'build_manpage': _build_manpage},
    test_suite='run_test.get_tests',

    options={
        'build_manpage': {
            'output': 'build/man/unball.1',
            'parser': 'unball:get_opt_parser',
        },
    },
)
